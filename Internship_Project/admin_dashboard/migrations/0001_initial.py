# Generated by Django 3.2.6 on 2021-08-22 11:25

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='email_settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_from', models.CharField(max_length=100)),
                ('smtp_host', models.CharField(max_length=100)),
                ('smtp_port', models.CharField(max_length=100)),
                ('smtp_user', models.CharField(max_length=100)),
                ('smtp_pass', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='general_setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favicon', models.ImageField(blank=True, null=True, upload_to='Favicon/')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='Logo/')),
                ('Application_Name', models.CharField(max_length=500)),
                ('timezone', models.CharField(max_length=100)),
                ('Default_language', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_name', models.CharField(default='No Role', max_length=1000)),
                ('controlller_name', models.CharField(max_length=1000)),
                ('fa_icon', models.CharField(max_length=500)),
                ('profile', models.BooleanField(default=True)),
                ('admin', models.BooleanField(default=False)),
                ('roles_permissions', models.BooleanField(default=False)),
                ('log', models.BooleanField(default=False)),
                ('settings', models.BooleanField(default=False)),
                ('crud', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='recaptcha_settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recaptcha_site_key', models.CharField(max_length=100)),
                ('recaptcha_secret_key', models.CharField(max_length=100)),
                ('recaptcha_lang', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('first_name', models.CharField(max_length=500, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=500, verbose_name='last_name')),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=60, unique=True, verbose_name='email address')),
                ('role', models.CharField(max_length=500, verbose_name='role')),
                ('status', models.BooleanField(default=False, verbose_name='status')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
